! function() {
    angular.module("ngCordova", ["ngCordova.plugins"]), angular.module("ngCordova.plugins.actionSheet", []).factory("$cordovaActionSheet", ["$q", "$window", function(e, n) {
        return {
            show: function(r) {
                var o = e.defer();
                return n.plugins.actionsheet.show(r, function(e) {
                    o.resolve(e)
                }), o.promise
            },
            hide: function() {
                return n.plugins.actionsheet.hide()
            }
        }
    }]), angular.module("ngCordova.plugins.appVersion", []).factory("$cordovaAppVersion", ["$q", function(e) {
        return {
            getAppName: function() {
                var n = e.defer();
                return cordova.getAppVersion.getAppName(function(e) {
                    n.resolve(e)
                }), n.promise
            },
            getPackageName: function() {
                var n = e.defer();
                return cordova.getAppVersion.getPackageName(function(e) {
                    n.resolve(e)
                }), n.promise
            },
            getVersionNumber: function() {
                var n = e.defer();
                return cordova.getAppVersion.getVersionNumber(function(e) {
                    n.resolve(e)
                }), n.promise
            },
            getVersionCode: function() {
                var n = e.defer();
                return cordova.getAppVersion.getVersionCode(function(e) {
                    n.resolve(e)
                }), n.promise
            }
        }
    }]),  angular.module("ngCordova.plugins.device", []).factory("$cordovaDevice", [function() {
        return {
            getDevice: function() {
                return device
            },
            getCordova: function() {
                return device.cordova
            },
            getModel: function() {
                return device.model
            },
            getName: function() {
                return device.name
            },
            getPlatform: function() {
                return device.platform
            },
            getUUID: function() {
                return device.uuid
            },
            getVersion: function() {
                return device.version
            },
            getManufacturer: function() {
                return device.manufacturer
            }
        }
    }]), angular.module("ngCordova.plugins.dialogs", []).factory("$cordovaDialogs", ["$q", "$window", function(e, n) {
        return {
            alert: function(r, o, t) {
                var i = e.defer();
                return n.navigator.notification ? navigator.notification.alert(r, function() {
                    i.resolve()
                }, o, t) : (n.alert(r), i.resolve()), i.promise
            },
            confirm: function(r, o, t) {
                var i = e.defer();
                return n.navigator.notification ? navigator.notification.confirm(r, function(e) {
                    i.resolve(e)
                }, o, t) : n.confirm(r) ? i.resolve(1) : i.resolve(2), i.promise
            },
            prompt: function(r, o, t, i) {
                var a = e.defer();
                if (n.navigator.notification) navigator.notification.prompt(r, function(e) {
                    a.resolve(e)
                }, o, t, i);
                else {
                    var c = n.prompt(r, i);
                    null !== c ? a.resolve({
                        input1: c,
                        buttonIndex: 1
                    }) : a.resolve({
                        input1: c,
                        buttonIndex: 2
                    })
                }
                return a.promise
            },
            beep: function(e) {
                return navigator.notification.beep(e)
            },
            activityStart: function(n, r) {
                var o = e.defer();
                return "android" === cordova.platformId ? (navigator.notification.activityStart(r, n), o.resolve()) : o.reject(n, r), o.promise
            },
            activityStop: function() {
                var n = e.defer();
                return "android" === cordova.platformId ? (navigator.notification.activityStop(), n.resolve()) : n.reject(), n.promise
            },
            progressStart: function(n, r) {
                var o = e.defer();
                return "android" === cordova.platformId ? (navigator.notification.progressStart(r, n), o.resolve()) : o.reject(n, r), o.promise
            },
            progressStop: function() {
                var n = e.defer();
                return "android" === cordova.platformId ? (navigator.notification.progressStop(), n.resolve()) : n.reject(), n.promise
            },
            progressValue: function(n) {
                var r = e.defer();
                return "android" === cordova.platformId ? (navigator.notification.progressValue(n), r.resolve()) : r.reject(n), r.promise
            }
        }
    }]),  angular.module("ngCordova.plugins.keyboard", []).factory("$cordovaKeyboard", ["$rootScope", function(e) {
        var n = function() {
                e.$evalAsync(function() {
                    e.$broadcast("$cordovaKeyboard:show")
                })
            },
            r = function() {
                e.$evalAsync(function() {
                    e.$broadcast("$cordovaKeyboard:hide")
                })
            };
        return document.addEventListener("deviceready", function() {
            cordova.plugins.Keyboard && (window.addEventListener("native.keyboardshow", n, !1), window.addEventListener("native.keyboardhide", r, !1))
        }), {
            hideAccessoryBar: function(e) {
                return cordova.plugins.Keyboard.hideKeyboardAccessoryBar(e)
            },
            close: function() {
                return cordova.plugins.Keyboard.close()
            },
            show: function() {
                return cordova.plugins.Keyboard.show()
            },
            disableScroll: function(e) {
                return cordova.plugins.Keyboard.disableScroll(e)
            },
            isVisible: function() {
                return cordova.plugins.Keyboard.isVisible
            },
            clearShowWatch: function() {
                document.removeEventListener("native.keyboardshow", n), e.$$listeners["$cordovaKeyboard:show"] = []
            },
            clearHideWatch: function() {
                document.removeEventListener("native.keyboardhide", r), e.$$listeners["$cordovaKeyboard:hide"] = []
            }
        }
    }]), 
	angular.module("ngCordova.plugins", ["ngCordova.plugins.actionSheet", "ngCordova.plugins.appVersion", "ngCordova.plugins.device", "ngCordova.plugins.dialogs", "ngCordova.plugins.keyboard", "ngCordova.plugins.splashscreen" 
	]),
	 angular.module("ngCordova.plugins.splashscreen", []).factory("$cordovaSplashscreen", [function() {
        return {
            hide: function() {
                return navigator.splashscreen.hide()
            },
            show: function() {
                return navigator.splashscreen.show()
            }
        }
    }])
}();